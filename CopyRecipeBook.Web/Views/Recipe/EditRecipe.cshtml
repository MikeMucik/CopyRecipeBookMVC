@model CopyRecipeBookMVC.Application.ViewModels.Recipe.NewRecipeVm

@{
	ViewData["Title"] = "EditRecipe";
}

<h1>Edycja przepisu</h1>

<h4>Formularz do edycji przepisu</h4>
<hr />
<form asp-action="EditRecipe">
	<div class="row">
		<div class="col-md-6">
			<div asp-validation-summary="ModelOnly" class="text-danger"></div>
			@if (TempData["RecipeExist"] != null)
			{
				<div class="text-danger">@TempData["RecipeExist"]</div>
			}
			<input type="hidden" asp-for="Id" />

			<div class="form-group">
				<label asp-for="Name" class="control-label"></label>
				<input asp-for="Name" class="form-control" />
				<span asp-validation-for="Name" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="CategoryId" class="control-label"></label>
				<select asp-for="CategoryId" class="form-control" asp-items="ViewBag.Categories"></select>
				<span asp-validation-for="CategoryId" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="DifficultyId" class="control-label"></label>
				<select asp-for="DifficultyId" class="form-control" asp-items="ViewBag.Difficulties"></select>
				<span asp-validation-for="DifficultyId" class="text-danger"></span>
			</div>

			<div class="row">
				<p> Czas przepisu</p>
				<div class="col-md-4">
					<div class="form-group">
						<label asp-for="TimeId" class="control-label"></label>
						<select asp-for="TimeId" id="timeId" class="form-control" asp-items="ViewBag.Times">
							<option value="">--Wybierz Czas--</option>
						</select>
						<span asp-validation-for="TimeId" class="text-danger"></span>
					</div>
				</div>
				<div class="col-md-4">
					<div class="form-group">
						<label asp-for="TimeAmount" class="control-label"></label>
						<input asp-for="TimeAmount" type="number" id="TimeAmount" class="form-control" />
						<span asp-validation-for="TimeAmount" class="text-danger"></span>
					</div>
				</div>
				<div class="col-md-4">
					<div class="form-group">
						<label asp-for="TimeUnit" class="control-label"></label>
						<input asp-for="TimeUnit" id="TimeUnit" class="form-control" />
						<span asp-validation-for="TimeUnit" class="text-danger"></span>
					</div>
				</div>
				<input type="hidden" id="NewTimeId" name="NewTimeId" />
			</div>
			<div class="form-group">

				<button type="button" style="display:block; text-align: right;" id="addTimeBtn" class="btn btn-primary">Dodaj Czas</button>
			</div>

			<h4>Dodaj Składniki</h4>
			<div id="ingredients-container">
				<div class="row">
					<input type="hidden" id="numberOfIngredients" name="NumberOfIngredients" value="@(Model.Ingredients?.Count ?? 0)" />

					<span asp-validation-for="NumberOfIngredients" class="text-danger"></span>
					<div class="col-md-12">

						<div class="form-group">
							<label for="ingredientName">Wybierz Składnik</label>
							<select id="ingredientName" class="form-control">
								<option value="">-- Wybierz składnik --</option>
								@foreach (var ingredient in ViewBag.Ingredients)
								{
									<option value="@ingredient.Value">@ingredient.Text</option>
								}
							</select>
						</div>

						<div class="form-group">
							<label for="newIngredientName">Nazwa Nowego Składnika</label>
							<input type="text" id="newIngredientName" name="newIngredientName" class="form-control" placeholder="Dodaj nowy składnik (jeśli brak na liście)" />
							<span data-valmsg-for="NewIngredientName" class="text-danger"></span>
						</div>

						<div class="form-group">
							<label for="ingredientQuantity">Ilość</label>
							<input type="number" id="ingredientQuantity" class="form-control" step="1" />
							<span data-valmsg-for="Quantity" class="text-danger"></span>
						</div>

						<div class="form-group">
							<label for="ingredientUnit">Wybierz Miara</label>
							<select id="ingredientUnit" class="form-control">
								<option value="">-- Wybierz miara --</option>
								@foreach (var unit in ViewBag.Units)
								{
									<option value="@unit.Value">@unit.Text</option>
								}
							</select>
						</div>

						<div class="form-group">
							<label for="newIngredientUnit">Nazwa Nowej Miary</label>
							<input type="text" id="newIngredientUnit" class="form-control" placeholder="Dodaj nową miarę (jeśli brak na liście)" />
							<span data-valmsg-for="NewIngredientUnit" class="text-danger"></span>
						</div>
						<button type="button" id="addIngredientBtn" class="btn btn-primary">Dodaj składnik</button>
					</div>
				</div>
			</div>

			<div class="form-group">
				<label asp-for="Description" class="control-label"></label>
				<input asp-for="Description" class="form-control" />
				<span asp-validation-for="Description" class="text-danger"></span>
			</div>

			<div class="form-group">
				<input type="submit" value="Zapisz przepis" class="btn btn-primary" />
			</div>

		</div>
		<div class="col-md-6">
			<div id="ingredients-list" class="ingr">
				@*Wyświetlenie składników*@
				@{
					var ingredientsList = ViewBag.Ingredients as List<SelectListItem>;
					var unitList = ViewBag.Units as List<SelectListItem>;

					Func<int, List<SelectListItem>, string> getNameById = (id, list) =>
					list.FirstOrDefault(x => x.Value == id.ToString())?.Text;
					var ingredientNumber = 0;
				}
				@foreach (var ingredient in Model.Ingredients ?? Enumerable.Empty<CopyRecipeBookMVC.Application.ViewModels.RecipeIngredient.IngredientForNewRecipeVm>())
				{
					var ingredientName = ingredient.NewIngredientName ?? getNameById(ingredient.IngredientName, ingredientsList);
					var unitName = ingredient.NewIngredientUnit ?? getNameById(ingredient.IngredientUnit, unitList);
					ingredientNumber++;
					<div class="ingredient-item" style="display: inline-block;">
						<p><strong>Numer Składnika: </strong> @ingredientNumber </p>
						<p><strong>Nazwa Składnika:</strong> @ingredientName</p>
						<p><strong>Ilość:</strong> @ingredient.Quantity</p>
						<p><strong>Miara:</strong>	@unitName</p>

						<input type="hidden" name="Ingredients[@Model.Ingredients.IndexOf(ingredient)].IngredientName" value="@ingredient.IngredientName" />
						<input type="hidden" name="Ingredients[@Model.Ingredients.IndexOf(ingredient)].Quantity" value="@ingredient.Quantity" />
						<input type="hidden" name="Ingredients[@Model.Ingredients.IndexOf(ingredient)].IngredientUnit" value="@ingredient.IngredientUnit" />
						<input type="hidden" name="Ingredients[@Model.Ingredients.IndexOf(ingredient)].NewIngredientName" value="@ingredient.NewIngredientName" />
						<input type="hidden" name="Ingredients[@Model.Ingredients.IndexOf(ingredient)].NewIngredientUnit" value="@ingredient.NewIngredientUnit" />

						<button type="button" class="edit-ingredient-btn btn-dark"
								data-numberOfIngredients-id="@Model.NumberOfIngredients"
								data-ingredient-id="@ingredient.IngredientName"
								data-recipe-id="@Model.Id"
								data-unit-id="@ingredient.IngredientUnit">
							Edytuj składnik
						</button>
						<button type="button" class="delete-ingredient-btn btn-dark"
								data-ingredient-id="@ingredient.IngredientName"
								data-recipe-id="@Model.Id"
								data-unit-id="@ingredient.IngredientUnit">
							Usuń składnik
						</button>
					</div>
				}
			</div>
		</div>
	</div>
</form>
<button onclick="window.location.href = sessionStorage.getItem('lastGetPage') || '/Home/Index'" class="btn btn-primary"
		style="position: fixed; bottom: 20px;  right: 20px;   z-index: 1000;">
	Wróć
</button>
<div>
	<a asp-action="Index">Wróć do listy przepisów</a>
</div>

@section Scripts {
	<script>
		var editedIngredient = false;
		$('#addTimeBtn').on('click', function () {
			var timeAmount = parseFloat($('#TimeAmount').val().replace(',', '.'));
			var timeUnit = $('#TimeUnit').val();
			if (timeAmount != 0 && timeUnit != "") {
				if (timeUnit.length > 10) {
					$("span[data-valmsg-for='TimeUnit']").text("Pole jednostka czasu może mieć maksymalnie 9 znaków");
					return;
				}
				if (timeAmount < 0 || timeAmount > 59) {
					$("span[data-valmsg-for='TimeAmount']").text("Wartość poza zakresem");
					return;
				}
				$.ajax({
					url: '/Recipe/AddTime',
					method: 'POST',
					headers: {
						'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
					},
					contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
					data: {
						timeAmount: timeAmount,
						timeUnit: timeUnit
					},
					success: function (response) {
						if (response.success) {
							const timeIdSelect = $('#timeId');
							const newOption = $('<option>', {
								text: `${timeAmount} ${timeUnit}`,
								value: response.newTimeId
							});
							timeIdSelect.append(newOption);
							timeIdSelect.val(response.newTimeId);

							$("span[data-valmsg-for='TimeId']").text("");
							$("span[data-valmsg-for='TimeAmount']").text("");
							$("span[data-valmsg-for='TimeUnit']").text("");
						} else {
							$("span[data-valmsg-for='TimeId']").text(response.errorMessage);
						}
					},
					error: function () {
						$("span[data-valmsg-for='TimeId']").text('Wystąpił błąd podczas dodawania czasu.');
					}
				});
			}
			else {
				$("span[data-valmsg-for='TimeId']").text("Uzupełnij pola jednostka czasu i ilość czasu");
			}
		});

		$(document).on('click', '.delete-ingredient-btn', function () {
			ingredientItem = $(this).closest('.ingredient-item');
			ingredientItem.remove();

			$('.ingredient-item').each(function (index) {
				$(this).find('p:contains(Numer Składnika)').html('<strong>Numer Składnika:<strong>' + (index + 1));
				$(this).find('input[name^="Ingredients["]').each(function () {
					var name = $(this).attr('name');
					var newName = name.replace(/\[\d+\]/, '[' + index + ']');
					$(this).attr('name', newName);
				});
			});
			$('#numberOfIngredients').val($('.ingredient-item').length);
		});

		$(document).on('click', '.edit-ingredient-btn', function () {
			if (editedIngredient) {
				$("span[data-valmsg-for='NumberOfIngredients']").text('Już edytujesz składnik');
				return
			}
			var ingredientItem = $(this).closest('.ingredient-item');
			var ingredientId = ingredientItem.find('input[name$=".IngredientName"]').val();
			var ingredientQuantity = ingredientItem.find('p:contains("Ilość")').text().split(": ")[1];
			var unitId = ingredientItem.find('input[name$=".IngredientUnit"]').val();

			$('#ingredientName').val(ingredientId);
			$('#ingredientQuantity').val(ingredientQuantity);
			$('#ingredientUnit').val(unitId);

			ingredientItem.remove();
			editedIngredient = true;
			$('.ingredient-item').each(function (index) {
				$(this).find('p:contains(Numer Składnika)').html('<strong>Numer Składnika:</strong>' + (index + 1));

				$(this).find('input[name^="Ingredients["]').each(function () {
					var name = $(this).attr('name');
					var newName = name.replace(/\[\d+\]/, '[' + index + ']');
					$(this).attr('name', newName);
				});
			});
			$('#numberOfIngredients').val($('.ingredient-item').length);
		});

		$('#addIngredientBtn').on('click', function (event) {
			event.preventDefault();
			let isValid = true;
			var ingredientQuantity = parseFloat($('#ingredientQuantity').val().replace(',', '.'));
			if (isNaN(ingredientQuantity)) {
				$("span[data-valmsg-for='Quantity']").text("Prosze podać prawidłową ilość.");
				isValid = false;
			}

			var ingredientSelect = $('#ingredientName');
			var ingredientId = ingredientSelect.val();
			var unitSelect = $('#ingredientUnit');
			var unitId = unitSelect.val();

			var newIngredientName = $('#newIngredientName').val();
			var newIngredientUnit = $('#newIngredientUnit').val();

			var finalIngredientName = newIngredientName || ingredientSelect.find('option:selected').text();
			var finalIngredientUnit = newIngredientUnit || unitSelect.find('option:selected').text();

			if (newIngredientName.length > 20 && !ingredientId) {
				$("span[data-valmsg-for='NewIngredientName']").text("Nazwa składnika może mieć maksymalnie 20 znaków");
				isValid = false;
			} else if (!ingredientId && !newIngredientName) {
				$("span[data-valmsg-for='NewIngredientName']").text("Proszę wybrać składnik lub wpisać nowy");
				isValid = false;
			}
			else {
				$("span[data-valmsg-for='NewIngredientName']").text('');
			}
			
			if (!ingredientQuantity || ingredientQuantity <= 0) {
				$("span[data-valmsg-for='Quantity']").text("Ilość musi być większa od zera");
				isValid = false;
			} else {
				$("span[data-valmsg-for='Quantity']").text('');
			}
			
			if (newIngredientUnit.length > 10 && !unitId) {
				$("span[data-valmsg-for='NewIngredientUnit']").text("Miara składnika może mieć maksymalnie 10 znaków");
				isValid = false;
			} else if (!unitId && !newIngredientUnit) {
				$("span[data-valmsg-for='NewIngredientUnit']").text("Proszę wybrać jednostkę miary lub wpisać nową");
				isValid = false;
			}
			else {
				$("span[data-valmsg-for='NewIngredientUnit']").text('');
			}
			if (isValid) {
				$.ajax({
					url: '/Recipe/AddIngredient',
					type: 'POST',
					headers: {
						'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
					},
					contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
					data: {
						newIngredientName: newIngredientName || null,
						newIngredientUnit: newIngredientUnit || null,
						ingredientName: ingredientId || 0,
						ingredientUnit: unitId || 0
					},
					success: function (response) {
						if (response.success) {
							addIngredientToList(response.ingredientId, finalIngredientName, ingredientQuantity, response.unitId, finalIngredientUnit);
						} else {
							alert("Błąd podczas dodawania składnika.");
						}
					},
					error: function () {
						alert('Wystąpił błąd.');
					}
				});
			}
		});

		function addIngredientToList(ingredientId, finalIngredientName, ingredientQuantity, unitId, finalIngredientUnit) {
			var index = $('.ingredient-item').length;
			var ingredientHtml = `
						<div class="ingredient-item" style="display: inline-block;">
						<p><strong>Numer Składnika: </strong> ${index + 1} </p>
						<p><strong>Nazwa Składnika:</strong> ${finalIngredientName}</p>
						<p><strong>Ilość:</strong> ${ingredientQuantity}</p>
						<p><strong>Miara:</strong> ${finalIngredientUnit}</p>

						<input type="hidden" name="Ingredients[${index}].IngredientName" value="${ingredientId}" />
						<input type="hidden" name="Ingredients[${index}].Quantity" value="${ingredientQuantity}" />
						<input type="hidden" name="Ingredients[${index}].IngredientUnit" value="${unitId}" />

						<button type="button"  class="edit-ingredient-btn btn-dark">Edytuj składnik</button>
						<button type="button"  class="delete-ingredient-btn btn-dark">Usuń składnik</button>
						</div>`;
		
			$('#ingredients-list').append(ingredientHtml);
			$('#numberOfIngredients').val(index + 1);

			editedIngredient = false;

			$("span[data-valmsg-for='NumberOfIngredients']").text('');

			$('#ingredientName').val('');
			$('#ingredientQuantity').val('');
			$('#ingredientUnit').val('');
			$('#newIngredientName').val('');
			$('#newIngredientUnit').val('');
		}

		$("#newIngredientName").on('input', function () {
			const ingredientName = $('#ingredientName');
			ingredientName.val('');
			ingredientName.find('options').first().text("Wybierz skałdnik");
		});
		$("#newIngredientUnit").on('input', function () {
			const ingredientName = $('#ingredientUnit');
			ingredientName.val('');
			ingredientName.find('options').first().text("Wybierz miarę");
		});
		$("#ingredientName").on('click', function () {
			const newIngredientName = $('#newIngredientName');
			newIngredientName.val('');
		});
		$("#ingredientUnit").on('click', function () {
			const newIngredientUnit = $('#newIngredientUnit');
			newIngredientUnit.val('');
		});
		$("#timeId").on('click', function () {
			const timeAmount = $('#TimeAmount');
			timeAmount.val('');
			const timeUnit = $('#TimeUnit');
			timeUnit.val('');
		});
		$('#TimeUnit').on('click', function () {
			const timeId = $('#timeId');
			timeId.val('');
		});
		$('#TimeAmount').on('click', function () {
			const timeId = $('#timeId');
			timeId.val('');
		});
		function checkNameUnique(name) {
			$.ajax({
				url: "/Recipe/CheckName",
				type: "POST",
				data: { name: name },
				success: function (data) {
					const nameError = $("#nameError");
					if (data.exists) {
						nameError.text("Przepis o podanej nazwie istnieje");
					} else {
						nameError.text("");
					}
				},
				error: function (xhr, status, error) {
					console.error("Błąd połączenia:", error);
				}
			});
		}
	</script>
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
}
